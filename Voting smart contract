// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;
// crowd funding project
// the manager of the program needs the green flag of the 50% of the contributers to get the money out of the contract
// if the deadline to rais the required money is not met, the contributors can take the money out of the contrac
// the contributor can only take the money out if the deadline is over. in case the deadline is not over then the contributor can not take the money out.

contract CrowndFunding{
    mapping(address => uint) public contributors; // Tracks each contributor's cumulative contribution
    address public manager;
    uint public minContribution;
    uint public Deadline;
    uint public target;
    uint public raisedAmount;
    uint public noOfContributors; // for finding the percentage of contributors voted in favour of manager taking money out

    struct Request{
        string description; // descreption of the need 
        address payable recipient; // address of the needy
        uint value; // value needed by the needy
        bool completed;  // if the voting is completed
        uint noOfVoters; // no of votersout of contributors
        mapping(address =>bool)voters; // mapping shoes if the voters have contributed
    }

    mapping(uint =>Request) public requests;// map the reason of requests in numbers.
    uint public  numRequests; // mapping does not allow increment

    constructor(uint _target, uint _deadline){
        target =_target;
        Deadline =block.timestamp + _deadline;// 10 sec + 3600 sec
        minContribution = 100 wei; // min contribution.
        manager = msg.sender;
    }

    function sendEth() public payable {// for contributors to contribute ethers
        require(block.timestamp < Deadline," dead line has passed");
        require(msg.value >= minContribution, "Minimum amount of contibution required");

        if(contributors[msg.sender] ==0){ // in case the contributor is contributing the first time
            noOfContributors++;
        }
        contributors[msg.sender] += msg.value; // the contributor is contributing again. 
        raisedAmount += msg.value;
    }

    function getCOntractBalance() public view returns(uint){
        return address(this).balance;
    }

    function Refund() public{
        require(block.timestamp > Deadline && raisedAmount <target, "You are not eligible for refund" );
        require(contributors[msg.sender] > minContribution);
        
        address payable  user = payable (msg.sender); // make the msg.sender payable
        user.transfer(contributors[msg.sender]); // user.trsnsfer(100)
        contributors[msg.sender]= 0;     
    }

    modifier onlyManager(){
        require(msg.sender == manager,"only manager can call this function");
        _;
    }

    function createRequests(string memory _description, address payable _recipient, uint _value)public onlyManager{
        // newRequest of type Request = request[0];
        Request storage newRequest = requests[numRequests];
        numRequests++;
        newRequest.description =_description;
        newRequest.recipient = _recipient;
        newRequest.value= _value;
        newRequest.completed = false;
        newRequest.noOfVoters = 0; 
    }

    function voteRequest(uint _requestNo)public {
        require(contributors[msg.sender]>= minContribution," you must be a contributor");
        Request storage thisRequest = requests[_requestNo];
        require(thisRequest.voters[msg.sender] == false, "you have already voted");
        thisRequest.voters[msg.sender]= true;
        thisRequest.noOfVoters++;
    }

    function makePayment(uint _requestNo) public onlyManager{
        require(raisedAmount >= target);
        Request storage thisRequest = requests[_requestNo];
        require(thisRequest.completed ==false,"The request has been completed");
        require(thisRequest.noOfVoters > noOfContributors/2,"The majority does not support");
        thisRequest.recipient.transfer(thisRequest.value);
        thisRequest.completed =true;
    }


}
